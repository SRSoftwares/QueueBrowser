/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.queuebrowser.views;

import com.queuebrowser.utility.MiscUtility;
import com.queuebrowser.utility.QueueConnectivity;
import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Image;
import java.sql.SQLException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author - Sumit Roy
 * @Created On - May 13, 2013 , 6:19:39 PM
 * @Project - Queue Browser
 */
public class PurgeQueueMessagesDialog extends javax.swing.JDialog {

    private static final Logger logger = LoggerFactory.getLogger(PurgeQueueMessagesDialog.class);
    
    private List<String> availableQueues;
    private ProgressPanel progressPanel;
    private QueueConnectivity queueConnectivity;
    private String schema;

    private PurgeQueueMessagesDialog(Frame parent) {
        super(parent, true);
        initComponents();
        this.queueConnectivity = new QueueConnectivity();
        setDialogIcon();
        setLocationRelativeTo(parent);        
    }

    /**
     * Creates new form EmptyQueueMessagesDialog
     */
    public PurgeQueueMessagesDialog(MainMonitoringWindow parent, List<String> availableQueues, String schema) {
        this(parent);  
        this.availableQueues = availableQueues;
        this.schema = schema;
        this.populateAvailableQueueBox();
        MiscUtility.addScrollAction(availableQueueBox);
        loadDefaultValue();
        setVisible(true);
    }

    private void loadDefaultValue() {
        queueTableText.setText("Q_" + availableQueueBox.getSelectedItem().toString());
    }

    private void setDialogIcon() {
        try {
            Image image = ImageIO.read(this.getClass().getResource("/images/emptyQueueBig.png"));
            if (image != null) {
                this.setIconImage(image);
            }
        } catch (Exception e) {
            logger.error("Exception Occured {}", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        selectQueueLabel = new javax.swing.JLabel();
        availableQueueBox = new javax.swing.JComboBox();
        emptyQueueBtn = new javax.swing.JButton();
        mainProgressPanel = new javax.swing.JPanel();
        queueTableLabel = new javax.swing.JLabel();
        queueTableText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Purge Queue");
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Purge Queue Messages"));

        selectQueueLabel.setText("Select Queue");

        availableQueueBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableQueueBoxActionPerformed(evt);
            }
        });

        emptyQueueBtn.setText("Purge Queue");
        emptyQueueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emptyQueueBtnActionPerformed(evt);
            }
        });

        mainProgressPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainProgressPanel.setLayout(new java.awt.BorderLayout());

        queueTableLabel.setText("Queue Table");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectQueueLabel)
                    .addComponent(queueTableLabel))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(queueTableText)
                    .addComponent(availableQueueBox, 0, 142, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(emptyQueueBtn)
                .addGap(0, 29, Short.MAX_VALUE))
            .addComponent(mainProgressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(availableQueueBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectQueueLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(20, 20, 20)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(queueTableLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(queueTableText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(emptyQueueBtn)))
                .addGap(18, 18, 18)
                .addComponent(mainProgressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void emptyQueueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emptyQueueBtnActionPerformed
        final String selectedQueue = availableQueueBox.getSelectedItem().toString();
        progressPanel = new ProgressPanel();
        progressPanel.setProgressLabelText("Deleteing All Messages from " + selectedQueue + " Queue");
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                mainProgressPanel.removeAll();
                mainProgressPanel.setLayout(new BorderLayout());
                mainProgressPanel.add(progressPanel, BorderLayout.CENTER);
                progressPanel.setVisible(true);
                mainProgressPanel.updateUI();
                mainProgressPanel.setVisible(true);
            }
        });

        Thread t = new Thread(new Runnable() {
            public void run() {
                try {
                    queueConnectivity.emptyQueueMessages(schema, selectedQueue, queueTableText.getText());
                    mainProgressPanel.removeAll();
                    mainProgressPanel.updateUI();
                    int option = JOptionPane.showConfirmDialog(PurgeQueueMessagesDialog.this,
                            String.format("All Messages from Queue %s are Sucessfully Deleted !\n\t\tPurge Another Queue ?\n\n", selectedQueue),
                            "Queue Empty Sucessful", JOptionPane.YES_NO_OPTION);
                    if (option == JOptionPane.NO_OPTION) {
                        PurgeQueueMessagesDialog.this.dispose();
                    }
                } catch (SQLException ex) {
                    mainProgressPanel.removeAll();
                    mainProgressPanel.updateUI();
                    ExceptionDetailsDialog.showExceptionsDetailsDialog(PurgeQueueMessagesDialog.this, "SQL Exception", String.format("Delete All Messages from Queue : %s", selectedQueue), ex);
                    logger.error("Unable To Delete Messages from Queue " + selectedQueue + " Exception : {}", ex);
                }
            }
        });
        t.start();

    }//GEN-LAST:event_emptyQueueBtnActionPerformed

    private void availableQueueBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableQueueBoxActionPerformed
        queueTableText.setText("Q_" + availableQueueBox.getSelectedItem().toString());
    }//GEN-LAST:event_availableQueueBoxActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox availableQueueBox;
    private javax.swing.JButton emptyQueueBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel mainProgressPanel;
    private javax.swing.JLabel queueTableLabel;
    private javax.swing.JTextField queueTableText;
    private javax.swing.JLabel selectQueueLabel;
    // End of variables declaration//GEN-END:variables

    private void populateAvailableQueueBox() {

        ComboBoxModel model = new DefaultComboBoxModel(availableQueues.toArray());
        availableQueueBox.setModel(model);
    }
}
