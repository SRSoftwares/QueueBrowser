/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.queuebrowser.views;

import com.queuebrowser.utility.DatabaseConnectivity;
import com.queuebrowser.utility.MiscUtility;
import com.queuebrowser.utility.QueueConnectivity;

import java.awt.Frame;
import java.awt.Image;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.imageio.ImageIO;
import javax.jms.JMSException;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This view helps you to send messages to Queue
 *
 * @author Sumit Roy
 */
public class SendMessageDialog extends JDialog {

    private String selectedQueue;
    private String schema;
    private static final Logger logger = LoggerFactory.getLogger(SendMessageDialog.class);
    private QueueConnectivity queueConnectivity;

    /**
     * Creates new form SendMessageDialog
     */
    private  SendMessageDialog(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * Overloaded constructor for Showing Send Message Dialog
     *
     * @param selectedQueue name of the queue where the messages will be send
     * @param schema name of the schema where the queues resided
     * @param parent parent form on which this dialog will be open
     */
    public SendMessageDialog(MainMonitoringWindow parent,String selectedQueue, String schema) {
        this(parent, true);
        this.selectedQueue = selectedQueue;
        this.schema = schema;
        queueConnectivity = new QueueConnectivity();

        populateQueueName();
        populateMessageTypeBox();
        addListenerToTextArea();
        this.setLocationRelativeTo(parent);
        try {
            Image image = ImageIO.read(this.getClass().getResource("/images/sendMsgBig.png"));
            if (image != null) {
                this.setIconImage(image);
            }
        } catch (Exception e) {
            logger.error("Exception Occured {}", e);
        }
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                queueConnectivity = null;
            }
        });

        this.setVisible(true);
    }

    private void populateMessageTypeBox() {
        ComboBoxModel comboModel = new DefaultComboBoxModel();
        ((DefaultComboBoxModel) comboModel).addElement("Text");
        ((DefaultComboBoxModel) comboModel).addElement("Xml");
        comboModel.setSelectedItem("Text");
        messageTypeBox.setModel(comboModel);
        MiscUtility.addScrollAction(messageTypeBox);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        messageTypeBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        sendMessageButton = new javax.swing.JButton();
        queueNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Send Message to Queue");
        setModal(true);
        setName("sendMessageDialog"); // NOI18N
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Send Message"));

        jLabel1.setText("Queue");

        jLabel2.setText("Message Type");

        jLabel3.setText("Message");

        messageTypeBox.setToolTipText("Set the Message Type");
        messageTypeBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        messageTypeBox.setEnabled(false);

        jScrollPane1.setBorder(null);

        messageTextArea.setColumns(20);
        messageTextArea.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        messageTextArea.setLineWrap(true);
        messageTextArea.setRows(5);
        messageTextArea.setToolTipText("Write the Message to be send here");
        messageTextArea.setWrapStyleWord(true);
        messageTextArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setViewportView(messageTextArea);

        sendMessageButton.setText("Send Message");
        sendMessageButton.setEnabled(false);
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        queueNameLabel.setToolTipText("Queue , Where the message will be send");
        queueNameLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(queueNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(messageTypeBox, 0, 130, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sendMessageButton)
                .addGap(153, 153, 153))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(queueNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(messageTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sendMessageButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        sendMessageOperaton();
    }//GEN-LAST:event_sendMessageButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JComboBox messageTypeBox;
    private javax.swing.JLabel queueNameLabel;
    private javax.swing.JButton sendMessageButton;
    // End of variables declaration//GEN-END:variables

    private void sendMessageOperaton() {
        // Checking whether selected queue is still available
        List<String> queueNodes = DatabaseConnectivity.getQueueNames(schema);
        if (queueNodes.contains(selectedQueue)) {
            String messageType = messageTypeBox.getSelectedItem().toString();
            String messageContent = messageTextArea.getText().trim();
            try {
                queueConnectivity.sendTextMessage(schema, selectedQueue, messageContent, messageType);
                String msgToDisplay = String.format("Message Sent Succesfully to Queue : %s\n\tWould you like Send another Message ?", selectedQueue);
                int option = JOptionPane.showConfirmDialog(this, msgToDisplay, "Message Sent", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                if (option == JOptionPane.YES_OPTION) { // Send Anothe Message
                    //Resetting the Message Text Area
                    messageTextArea.setText("");

                } else { //Close this SendMesageDialog
                    this.dispose();
                }
            } catch (JMSException ex) {
                String msgToDisplay = String.format("Unable to send Message to Queue : %s\n\tWould you like to check Error Details ?", selectedQueue);
                int option = JOptionPane.showConfirmDialog(this, msgToDisplay, "Message Send Failed", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
                if (option == JOptionPane.OK_OPTION) {
                    ExceptionDetailsDialog.showExceptionsDetailsDialog(this,"JMS Exception", String.format("Message Sending for Queue : %s", selectedQueue),ex);
                    logger.error("JMSException Occured : ", ex);
                }
            }
        } else {
            String msgToDisplay = String.format("Sorry this Queue : %s is no more in physical Database !", selectedQueue);
            JOptionPane.showMessageDialog(this, msgToDisplay, "Queue No more Exist", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void handleTextAreaEvents() {
    }

    private void addListenerToTextArea() {
        messageTextArea.addCaretListener(new CaretListener() {
            public void caretUpdate(CaretEvent e) {
                if (!messageTextArea.getText().trim().isEmpty()) {
                    sendMessageButton.setEnabled(true);
                } else {
                    sendMessageButton.setEnabled(false);
                }
            }
        });

    }

    private void populateQueueName() {
        queueNameLabel.setText(selectedQueue);
    }
}
