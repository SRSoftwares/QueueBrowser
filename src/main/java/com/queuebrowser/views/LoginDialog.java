/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.queuebrowser.views;

import com.queuebrowser.utility.DatabaseConnectivity;
import com.queuebrowser.utility.LoadSaveLoginCredentials;
import com.queuebrowser.utility.MiscUtility;
import com.queuebrowser.datatypes.LoginCredentials;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.Socket;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Login View : Entry View for login to Queue Message Monitoring View Tool
 *
 * @author Sumit Roy
 */
public class LoginDialog extends JDialog implements ActionListener {

    private String userName;
    private String password;
    private String host;
    private String port;
    private String sid;
    private List<JCheckBoxMenuItem> themeCheckBoxMenuItems;
    private static final Logger logger = LoggerFactory.getLogger(LoginDialog.class);

    /**
     * Constructor that initialize the Login dialog
     */
    public LoginDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        addAvailableThemesToMenu();
        readLoginCredentialsFromFile();
        addEnterKeyActionsToAllTextFields();
        try {
            Image image = ImageIO.read(this.getClass().getResource("/images/login.png"));
            if (image != null) {
                this.setIconImage(image);
            }
        } catch (Exception e) {
            logger.error("Exception Occured ", e);
        }

        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        centralPanel = new javax.swing.JPanel();
        userNameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        sidLabel = new javax.swing.JLabel();
        hostAddressLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        sidTextField = new javax.swing.JTextField();
        hostAddressTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        buttonPanel = new javax.swing.JPanel();
        loginButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        loginMenuBar = new javax.swing.JMenuBar();
        themeMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        aboutUsItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Login - Queue Browser");
        setName("loginDialog"); // NOI18N
        setResizable(false);

        centralPanel.setBackground(new java.awt.Color(255, 255, 255));
        centralPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true), "Login Information", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        userNameLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        userNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        userNameLabel.setText("Username");

        passwordLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        passwordLabel.setText("Password");
        passwordLabel.setMaximumSize(new java.awt.Dimension(59, 15));
        passwordLabel.setMinimumSize(new java.awt.Dimension(59, 15));
        passwordLabel.setPreferredSize(new java.awt.Dimension(59, 15));

        sidLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        sidLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sidLabel.setText("SID");
        sidLabel.setMaximumSize(new java.awt.Dimension(59, 15));
        sidLabel.setMinimumSize(new java.awt.Dimension(59, 15));
        sidLabel.setPreferredSize(new java.awt.Dimension(59, 15));

        hostAddressLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        hostAddressLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        hostAddressLabel.setText("Host Address");
        hostAddressLabel.setMaximumSize(new java.awt.Dimension(59, 15));
        hostAddressLabel.setMinimumSize(new java.awt.Dimension(59, 15));
        hostAddressLabel.setPreferredSize(new java.awt.Dimension(59, 15));

        portLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        portLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        portLabel.setText("Port");
        portLabel.setMaximumSize(new java.awt.Dimension(59, 15));
        portLabel.setMinimumSize(new java.awt.Dimension(59, 15));
        portLabel.setPreferredSize(new java.awt.Dimension(59, 15));

        javax.swing.GroupLayout centralPanelLayout = new javax.swing.GroupLayout(centralPanel);
        centralPanel.setLayout(centralPanelLayout);
        centralPanelLayout.setHorizontalGroup(
            centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(centralPanelLayout.createSequentialGroup()
                        .addGroup(centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sidLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(hostAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );
        centralPanelLayout.setVerticalGroup(
            centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centralPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sidLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(centralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        buttonPanel.setBackground(new java.awt.Color(255, 255, 255));

        loginButton.setText("Login"); // NOI18N
        loginButton.setToolTipText("Connect and Login to Main Gui Tool");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Close this Dialog");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loginButton)
                .addGap(5, 5, 5)
                .addComponent(cancelButton)
                .addGap(89, 89, 89))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        loginMenuBar.setBackground(new java.awt.Color(255, 255, 255));
        loginMenuBar.setToolTipText("Change Themes");

        themeMenu.setBackground(new java.awt.Color(255, 255, 255));
        themeMenu.setText("Themes");
        themeMenu.setToolTipText("Change the theme");
        loginMenuBar.add(themeMenu);

        helpMenu.setBackground(new java.awt.Color(255, 255, 255));
        helpMenu.setText("Help");
        helpMenu.setToolTipText("Help for Queue Browsing Application");

        aboutUsItem.setText("About Queue Browser");
        aboutUsItem.setToolTipText("About the Queue Browsing tool");
        helpMenu.add(aboutUsItem);

        loginMenuBar.add(helpMenu);

        setJMenuBar(loginMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(centralPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(centralPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                performLoginAction();
            }
        });


    }//GEN-LAST:event_loginButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void performLoginAction() {
        if (formIsFilledProperly()) {

            boolean hostReachable = isHostReachable(host, 5);
            boolean portConnected = portScan(host, Integer.parseInt(port));
            if (hostReachable && portConnected) {
                Map<String, String> userCredentials = new HashMap<String, String>();
                userCredentials.put("host", host);
                userCredentials.put("port", port);
                userCredentials.put("sid", sid);
                userCredentials.put("username", userName);
                userCredentials.put("password", password);
                userCredentials.put("schema", userName.toUpperCase());
                userCredentials.put("logintime", MiscUtility.parseTime(
                        System.currentTimeMillis(), true));
                Connection conn = DatabaseConnectivity.createDatabaseConnection(userCredentials);
                if (conn != null) { // Succesfull Connection
                    writeLoginCredentialsToFile();
                    JOptionPane.showMessageDialog(LoginDialog.this,
                            "Database Connection Succesfull", "Database Connected",
                            JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                    MainMonitoringWindow.showMainMonitoringWindow(userCredentials);

                } else {
                    JOptionPane.showMessageDialog(LoginDialog.this,
                            "Database Connection Failed Error Message : "
                            + DatabaseConnectivity.getErrorMessage(),
                            "Database Connection Failed", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(LoginDialog.this,
                        "Destinaton Host/Port not reachable",
                        "Invalid Host/Port", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(LoginDialog.this,
                    "Fill the Credentials Properly", "Form Not Filled Properly",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * main method for Opening Login Dialog view,entry point to Message View GUI
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            logger.error("Exception {}", e);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoginDialog dialog = new LoginDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutUsItem;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel centralPanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel hostAddressLabel;
    private javax.swing.JTextField hostAddressTextField;
    private javax.swing.JButton loginButton;
    private javax.swing.JMenuBar loginMenuBar;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JLabel sidLabel;
    private javax.swing.JTextField sidTextField;
    private javax.swing.JMenu themeMenu;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables

    private boolean formIsFilledProperly() {
        userName = userNameTextField.getText().trim();
        password = String.valueOf(passwordTextField.getPassword()).trim();
        host = hostAddressTextField.getText().trim();
        port = portTextField.getText().trim();
        sid = sidTextField.getText().trim();
        return !(userName.isEmpty() || password.isEmpty() || host.isEmpty() || port.isEmpty() || sid.isEmpty());
    }

    /**
     *
     * @param host IP address or system name of the host where the database is
     * running
     * @param maxTry no of maximum try for connecting with the database
     * @return true when the host is reachable , else false is return
     */
    private boolean isHostReachable(String host, int maxTry) {
        try {
            if (Inet4Address.getByName(host).isReachable(maxTry * 1000)) {
            } else {
                return false;
            }
        } catch (IOException ex) {
            logger.error("Exception Occured ", ex);
        }
        return true;
    }

    /**
     *
     * @param host IP address or system name of the host where the database is
     * running
     * @param port port at which the database is running, e.g. for oracle port
     * is 1521
     * @return true if the port is active,else false
     */
    private boolean portScan(String host, int port) {
        boolean flag;
        try {
            Socket serverSocket = new Socket(host, port);
            serverSocket.close();
            flag = true;
        } catch (IOException ex) {
            logger.error("Exception Occured ", ex);
            flag = false;
        }
        return flag;
    }

    private void setDefaultValues() {
        userNameTextField.setText("");
        passwordTextField.setText("");
        hostAddressTextField.setText("");
        portTextField.setText("");
        sidTextField.setText("");
    }

    private void setValues(LoginCredentials loginCredentials) {
        userNameTextField.setText(loginCredentials.getUserName());
        passwordTextField.setText(loginCredentials.getPassword());
        hostAddressTextField.setText(loginCredentials.getHost());
        portTextField.setText(loginCredentials.getPort());
        sidTextField.setText(loginCredentials.getSid());
    }

    private void addEnterKeyActionsToAllTextFields() {
        MiscUtility.addEnterKeyAction(userNameTextField, loginButton);
        MiscUtility.addEnterKeyAction(passwordTextField, loginButton);
        MiscUtility.addEnterKeyAction(hostAddressTextField, loginButton);
        MiscUtility.addEnterKeyAction(portTextField, loginButton);
        MiscUtility.addEnterKeyAction(sidTextField, loginButton);
    }

    private void addAvailableThemesToMenu() {
        LookAndFeelInfo availableThemes[] = UIManager.getInstalledLookAndFeels();
        themeCheckBoxMenuItems = new ArrayList<JCheckBoxMenuItem>();
        ButtonGroup btnGrp = new ButtonGroup();
        for (LookAndFeelInfo eachTheme : availableThemes) {
            String lafClassName = eachTheme.getClassName();
            String lafName = eachTheme.getName();
            JCheckBoxMenuItem checkBoxMenuItem = new JCheckBoxMenuItem(lafName);
            themeCheckBoxMenuItems.add(checkBoxMenuItem);
            themeMenu.add(checkBoxMenuItem);
            btnGrp.add(checkBoxMenuItem);
            checkBoxMenuItem.setActionCommand(lafClassName);
            checkBoxMenuItem.addActionListener(this);
            if (lafClassName.equalsIgnoreCase(UIManager.getSystemLookAndFeelClassName())) {
                checkBoxMenuItem.setState(true);
            }
        }

    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JMenuItem) {
            JMenuItem item = (JMenuItem) e.getSource();
            if (item.getText().equalsIgnoreCase("About Queue Browser")) {
            } else {
                String lafClassName = item.getActionCommand();
                try {
                    UIManager.setLookAndFeel(lafClassName);
                } catch (ClassNotFoundException e1) {
                    logger.error("ClassNotFoundException Occured ", e);
                } catch (InstantiationException e1) {
                    logger.error("InstantiationException Occured ", e);
                } catch (IllegalAccessException e1) {
                    logger.error("IllegalAccessException Occured ", e);
                } catch (UnsupportedLookAndFeelException e1) {
                    logger.error("UnsupportedLookAndFeelException Occured ", e);
                }
                SwingUtilities.updateComponentTreeUI(LoginDialog.this);
                LoginDialog.this.pack();
                LoginDialog.this.validate();
            }
        }
    }

    private void writeLoginCredentialsToFile() {
        LoginCredentials loginCredentials = new LoginCredentials();
        loginCredentials.setUserName(userName);
        loginCredentials.setPassword(password);
        loginCredentials.setHost(host);
        loginCredentials.setPort(port);
        loginCredentials.setSid(sid);
        LoadSaveLoginCredentials loadSaveLoginCredentials = new LoadSaveLoginCredentials();
        try {
            loadSaveLoginCredentials.saveUserCredentials(loginCredentials);
        } catch (FileNotFoundException ex) {
            logger.error("FileNotFoundException Occured ", ex);
            ExceptionDetailsDialog.showExceptionsDetailsDialog(this, "File Not Found Exception", "Saving User Credentials While Login", ex);
        } catch (IOException ex) {
            logger.error("IOException Occured ", ex);
            ExceptionDetailsDialog.showExceptionsDetailsDialog(this, "IO Exception", "Saving User Credentials While Login", ex);
        }
    }

    private void readLoginCredentialsFromFile() {
        LoadSaveLoginCredentials loadSaveLoginCredentials = new LoadSaveLoginCredentials();
        try {
            LoginCredentials loginCredentials = loadSaveLoginCredentials.loadUserCredentials();
            setValues(loginCredentials);
        } catch (Exception ex) {
            logger.error("Exception Occured ", ex);
            setDefaultValues();
        }
    }
}
